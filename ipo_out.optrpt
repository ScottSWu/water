
*MIC* Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::run(Central2D<Shallow2D, MinMod<Shallow2D::real>> *, Central2D<Shallow2D, MinMod<Shallow2D::real>>::real)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(147,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at central2d.h(176,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at central2d.h(185,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at central2d.h(186,25)
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(191,29) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(192,29) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(193,29) ]
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(204,39) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(205,39) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(206,39) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15415: vectorization support: gather was generated for the variable su1:  indirect access    [ central2d.h(191,50) ]
            remark #15415: vectorization support: gather was generated for the variable su2:  indirect access    [ central2d.h(192,50) ]
            remark #15415: vectorization support: gather was generated for the variable su3:  indirect access    [ central2d.h(193,50) ]
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 3 
            remark #15458: masked indexed (or gather) loads: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 209 
            remark #15477: vector loop cost: 21.180 
            remark #15478: estimated potential speedup: 6.740 
            remark #15479: lightweight vector operations: 66 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15482: vectorized math library calls: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at central2d.h(200,25)
         LOOP END

         LOOP BEGIN at central2d.h(186,25)
         <Remainder>
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(191,29) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(192,29) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(193,29) ]
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(204,39) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(205,39) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(206,39) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15427: loop was completely unrolled
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END
      LOOP END

      LOOP BEGIN at central2d.h(199,21)
      LOOP END
   LOOP END

   LOOP BEGIN at central2d.h(235,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at central2d.h(247,25)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at central2d.h(252,29)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at central2d.h(253,33)
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(255,47) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(256,47) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(257,47) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(259,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(260,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(261,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(263,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(264,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(265,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 3 
               remark #15451: unmasked unaligned unit stride stores: 6 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 184 
               remark #15477: vector loop cost: 12.060 
               remark #15478: estimated potential speedup: 10.380 
               remark #15479: lightweight vector operations: 55 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at central2d.h(253,33)
            <Remainder>
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(255,47) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(256,47) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(257,47) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(259,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(260,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(261,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(263,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(264,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(265,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15427: loop was completely unrolled
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END

         LOOP BEGIN at central2d.h(270,29)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at central2d.h(271,45)
            <Peeled>
               remark #15389: vectorization support: reference pg3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(75,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ minmod.h(74,23) ]
               remark #15389: vectorization support: reference pgy3 has unaligned access   [ central2d.h(286,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(285,37) ]
               remark #15389: vectorization support: reference pgy2 has unaligned access   [ central2d.h(284,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(283,37) ]
               remark #15389: vectorization support: reference pgy1 has unaligned access   [ central2d.h(282,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(281,37) ]
               remark #15389: vectorization support: reference pfx3 has unaligned access   [ central2d.h(278,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(277,37) ]
               remark #15389: vectorization support: reference pfx2 has unaligned access   [ central2d.h(276,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(275,37) ]
               remark #15389: vectorization support: reference pfx1 has unaligned access   [ central2d.h(274,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(273,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15450: unmasked unaligned unit stride loads: 33 
               remark #15451: unmasked unaligned unit stride stores: 12 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 5957 
               remark #15477: vector loop cost: 5488.870 
               remark #15478: estimated potential speedup: 0.750 
               remark #15479: lightweight vector operations: 755 
               remark #15480: medium-overhead vector operations: 1 
               remark #15485: serialized function calls: 48
               remark #15488: --- end vector loop cost summary ---
               remark #15489: --- begin vector function matching report ---
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15490: Function call: __builtin_copysignf with simdlen=16, actual parameter types: (uniform,vector)   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/cmath(1180,12) ]
               remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
               remark #15493: --- end vector function matching report ---
            LOOP END
         LOOP END

         LOOP BEGIN at central2d.h(296,29)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at central2d.h(297,33)
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pfx1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pgy1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pfx2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pgy2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pfx3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pgy3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(304,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(305,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(306,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(308,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(309,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(310,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 3   [ central2d.h(305,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(305,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 3   [ central2d.h(310,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(310,37) ]
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 9 
               remark #15451: unmasked unaligned unit stride stores: 6 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 222 
               remark #15477: vector loop cost: 17.680 
               remark #15478: estimated potential speedup: 8.210 
               remark #15479: lightweight vector operations: 87 
               remark #15487: type converts: 8 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at central2d.h(297,33)
            <Remainder>
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pfx1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pgy1 has unaligned access   [ central2d.h(300,88) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pfx2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pgy2 has unaligned access   [ central2d.h(301,88) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pfx3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pgy3 has unaligned access   [ central2d.h(302,88) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(304,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(305,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(306,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(308,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(309,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(310,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15427: loop was completely unrolled
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 3   [ central2d.h(305,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(305,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 3   [ central2d.h(310,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(310,37) ]
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END

         LOOP BEGIN at central2d.h(354,29)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at central2d.h(356,33)
               remark #15389: vectorization support: reference pv1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pv2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pv3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(362,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(362,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(369,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(369,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(376,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(376,37) ]
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 60 
               remark #15451: unmasked unaligned unit stride stores: 3 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 290 
               remark #15477: vector loop cost: 23.250 
               remark #15478: estimated potential speedup: 7.440 
               remark #15479: lightweight vector operations: 162 
               remark #15487: type converts: 15 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at central2d.h(356,33)
            <Remainder>
               remark #15389: vectorization support: reference pv1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pux1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference puy1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pf1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pg1 has unaligned access   [ central2d.h(362,37) ]
               remark #15389: vectorization support: reference pv2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pux2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference puy2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pf2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pg2 has unaligned access   [ central2d.h(369,37) ]
               remark #15389: vectorization support: reference pv3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pux3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference puy3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pf3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15389: vectorization support: reference pg3 has unaligned access   [ central2d.h(376,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15427: loop was completely unrolled
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(362,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(362,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(369,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(369,37) ]
               remark #15417: vectorization support: number of FP up converts: single precision to double precision 4   [ central2d.h(376,37) ]
               remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ central2d.h(376,37) ]
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END

         LOOP BEGIN at central2d.h(386,29)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at central2d.h(387,33)
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(388,37) ]
               remark #15389: vectorization support: reference pv1 has unaligned access   [ central2d.h(388,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(389,37) ]
               remark #15389: vectorization support: reference pv2 has unaligned access   [ central2d.h(389,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(390,37) ]
               remark #15389: vectorization support: reference pv3 has unaligned access   [ central2d.h(390,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 3 
               remark #15451: unmasked unaligned unit stride stores: 3 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 39 
               remark #15477: vector loop cost: 1.680 
               remark #15478: estimated potential speedup: 11.810 
               remark #15479: lightweight vector operations: 9 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at central2d.h(387,33)
            <Remainder>
               remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(388,37) ]
               remark #15389: vectorization support: reference pv1 has unaligned access   [ central2d.h(388,37) ]
               remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(389,37) ]
               remark #15389: vectorization support: reference pv2 has unaligned access   [ central2d.h(389,37) ]
               remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(390,37) ]
               remark #15389: vectorization support: reference pv3 has unaligned access   [ central2d.h(390,37) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15427: loop was completely unrolled
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at central2d.h(399,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at central2d.h(400,25)
            remark #15389: vectorization support: reference res1 has unaligned access   [ central2d.h(408,29) ]
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(408,29) ]
            remark #15389: vectorization support: reference res2 has unaligned access   [ central2d.h(409,29) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(409,29) ]
            remark #15389: vectorization support: reference res3 has unaligned access   [ central2d.h(410,29) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(410,29) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15300: LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 3 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 39 
            remark #15477: vector loop cost: 1.680 
            remark #15478: estimated potential speedup: 11.810 
            remark #15479: lightweight vector operations: 9 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at central2d.h(400,25)
         <Remainder>
            remark #15389: vectorization support: reference res1 has unaligned access   [ central2d.h(408,29) ]
            remark #15389: vectorization support: reference pu1 has unaligned access   [ central2d.h(408,29) ]
            remark #15389: vectorization support: reference res2 has unaligned access   [ central2d.h(409,29) ]
            remark #15389: vectorization support: reference pu2 has unaligned access   [ central2d.h(409,29) ]
            remark #15389: vectorization support: reference res3 has unaligned access   [ central2d.h(410,29) ]
            remark #15389: vectorization support: reference pu3 has unaligned access   [ central2d.h(410,29) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15427: loop was completely unrolled
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at central2d.h(427,17)
   <Peeled, Multiversioned v1>
      remark #15389: vectorization support: reference su1 has unaligned access   [ central2d.h(428,21) ]
      remark #15389: vectorization support: reference res1 has unaligned access   [ central2d.h(428,21) ]
      remark #15389: vectorization support: reference su2 has unaligned access   [ central2d.h(429,21) ]
      remark #15389: vectorization support: reference res2 has unaligned access   [ central2d.h(429,21) ]
      remark #15389: vectorization support: reference su3 has unaligned access   [ central2d.h(430,21) ]
      remark #15389: vectorization support: reference res3 has unaligned access   [ central2d.h(430,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at central2d.h(427,17)
   <Multiversioned v1>
      remark #15389: vectorization support: reference su1 has unaligned access   [ central2d.h(428,21) ]
      remark #15389: vectorization support: reference res1 has unaligned access   [ central2d.h(428,21) ]
      remark #15388: vectorization support: reference su2 has aligned access   [ central2d.h(429,21) ]
      remark #15389: vectorization support: reference res2 has unaligned access   [ central2d.h(429,21) ]
      remark #15388: vectorization support: reference su3 has aligned access   [ central2d.h(430,21) ]
      remark #15389: vectorization support: reference res3 has unaligned access   [ central2d.h(430,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 20 
      remark #15477: vector loop cost: 1.430 
      remark #15478: estimated potential speedup: 13.890 
      remark #15479: lightweight vector operations: 9 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at central2d.h(427,17)
   <Alternate Alignment Vectorized Loop, Multiversioned v1>
   LOOP END

   LOOP BEGIN at central2d.h(427,17)
   <Remainder, Multiversioned v1>
      remark #15389: vectorization support: reference su1 has unaligned access   [ central2d.h(428,21) ]
      remark #15389: vectorization support: reference res1 has unaligned access   [ central2d.h(428,21) ]
      remark #15389: vectorization support: reference su2 has unaligned access   [ central2d.h(429,21) ]
      remark #15389: vectorization support: reference res2 has unaligned access   [ central2d.h(429,21) ]
      remark #15388: vectorization support: reference su3 has aligned access   [ central2d.h(430,21) ]
      remark #15389: vectorization support: reference res3 has unaligned access   [ central2d.h(430,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at central2d.h(427,17)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type *, std::size_t, std::char_traits<char16_t>::char_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(451,2)
<Peeled>
   remark #15389: vectorization support: reference __s has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(395,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(451,2)
   remark #15388: vectorization support: reference __s has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(395,9) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.150 
   remark #15478: estimated potential speedup: 12.500 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(451,2)
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(451,2)
<Remainder>
   remark #15389: vectorization support: reference __s has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(395,9) ]
   remark #15389: vectorization support: reference __s has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(395,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char16_t>::compare(const std::char_traits<char16_t>::char_type *, const std::char_traits<char16_t>::char_type *, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(408,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char16_t>::length(const std::char_traits<char16_t>::char_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(420,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char16_t>::find(const std::char_traits<char16_t>::char_type *, std::size_t, const std::char_traits<char16_t>::char_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(428,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type *, std::size_t, std::char_traits<char32_t>::char_type)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(544,2)
<Peeled>
   remark #15389: vectorization support: reference __s has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(488,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(544,2)
   remark #15388: vectorization support: reference __s has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(488,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 3 
   remark #15477: vector loop cost: 0.180 
   remark #15478: estimated potential speedup: 12.160 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(544,2)
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(544,2)
<Remainder>
   remark #15388: vectorization support: reference __s has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(488,9) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char32_t>::compare(const std::char_traits<char32_t>::char_type *, const std::char_traits<char32_t>::char_type *, std::size_t)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(501,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char32_t>::length(const std::char_traits<char32_t>::char_type *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(513,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::char_traits<char32_t>::find(const std::char_traits<char32_t>::char_type *, std::size_t, const std::char_traits<char32_t>::char_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/char_traits.h(521,2)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::__fill_bvector(std::_Bit_iterator, std::_Bit_iterator, bool)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(358,23)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::fill(std::_Bit_iterator, std::_Bit_iterator, const bool &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(368,2)
<Peeled>
   remark #15389: vectorization support: reference __first has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(368,2)
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.370 
   remark #15478: estimated potential speedup: 4.580 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(368,2)
<Remainder>
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(358,23) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(369,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(359,8) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(370,2)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(358,23) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_bvector.h(373,7)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::fill<std::_Bit_type *, int>(std::_Bit_type *, std::_Bit_type *, const int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(723,7)
<Peeled>
   remark #15389: vectorization support: reference __first has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(723,7)
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.370 
   remark #15478: estimated potential speedup: 4.580 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7) inlined into /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(723,7)
<Remainder>
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
LOOP END
===========================================================================

*MIC* Begin optimization report for: std::__fill_a<std::_Iter_base<std::_Bit_type *, false>::iterator_type, int>(std::_Iter_base<std::_Bit_type *, false>::iterator_type, std::_Iter_base<std::_Bit_type *, false>::iterator_type, const int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7)
<Peeled>
   remark #15389: vectorization support: reference __first has unaligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7)
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.370 
   remark #15478: estimated potential speedup: 4.580 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(686,7)
<Remainder>
   remark #15388: vectorization support: reference __first has aligned access   [ /usr/linux-k1om-4.7/linux-k1om/../x86_64-k1om-linux/include/c++/4.7.0/bits/stl_algobase.h(687,3) ]
LOOP END
===========================================================================

*MIC* Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::solution_check(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(457,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at central2d.h(456,5)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

*MIC* Begin optimization report for: SimViz<Sim>::write_frame(SimViz<Sim> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at meshio.h(59,37)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and  line 62
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 62 and uij line 61

   LOOP BEGIN at meshio.h(60,41)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and  line 62
      remark #15346: vector dependence: assumed OUTPUT dependence between  line 62 and uij line 61
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::init(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 92 and this line 98
   remark #15346: vector dependence: assumed FLOW dependence between this line 98 and this line 92

   LOOP BEGIN at central2d.h(91,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this line 92 and this line 98
      remark #15346: vector dependence: assumed FLOW dependence between this line 98 and this line 92
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5) inlined into driver.cc(115,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between u3_ line 92 and u3_ line 98
   remark #15346: vector dependence: assumed FLOW dependence between dx line 98 and dx line 92

   LOOP BEGIN at central2d.h(91,9) inlined into driver.cc(115,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between u3_ line 92 and u3_ line 98
      remark #15346: vector dependence: assumed FLOW dependence between dx line 98 and dx line 92
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(117,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(119,9)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and uij line 62
   remark #15346: vector dependence: assumed OUTPUT dependence between uij line 62 and uij line 61

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(119,9)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and uij line 62
      remark #15346: vector dependence: assumed OUTPUT dependence between uij line 62 and uij line 61
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(125,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(127,13)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and uij line 62
   remark #15346: vector dependence: assumed OUTPUT dependence between uij line 62 and uij line 61

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(127,13)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between uij line 61 and uij line 62
      remark #15346: vector dependence: assumed OUTPUT dependence between uij line 62 and uij line 61
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(117,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at driver.cc(120,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(125,13)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5) inlined into driver.cc(115,9)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at central2d.h(91,9) inlined into driver.cc(115,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(117,9)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(119,9)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(119,9)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(125,13)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(127,13)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(127,13)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(117,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at driver.cc(120,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(125,13)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5) inlined into driver.cc(115,9)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at central2d.h(91,9) inlined into driver.cc(115,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(117,9)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(119,9)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(119,9)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   LOOP END
LOOP END

LOOP BEGIN at central2d.h(457,9) inlined into driver.cc(125,13)
   remark #25460: No loop optimizations reported
LOOP END

LOOP BEGIN at meshio.h(59,37) inlined into driver.cc(127,13)
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]

   LOOP BEGIN at meshio.h(60,41) inlined into driver.cc(127,13)
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(117,9)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END

LOOP BEGIN at driver.cc(120,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at central2d.h(456,5) inlined into driver.cc(125,13)
      remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::solution_check(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(457,9)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at central2d.h(456,5)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: SimViz<Sim>::write_frame(SimViz<Sim> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at meshio.h(59,37)
   remark #15382: vectorization support: call to function Central2D<Shallow2D, MinMod<Shallow2D::real>>::operator()(const Central2D<Shallow2D, MinMod<Shallow2D::real>> *, int, int) const cannot be vectorized   [ meshio.h(61,36) ]
   remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 61 and  line 62
   remark #15346: vector dependence: assumed FLOW dependence between  line 62 and this line 61

   LOOP BEGIN at meshio.h(60,41)
      remark #15382: vectorization support: call to function Central2D<Shallow2D, MinMod<Shallow2D::real>>::operator()(const Central2D<Shallow2D, MinMod<Shallow2D::real>> *, int, int) const cannot be vectorized   [ meshio.h(61,36) ]
      remark #15382: vectorization support: call to function fwrite(const void *, size_t, size_t, FILE *) cannot be vectorized   [ meshio.h(62,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::init(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this line 92 and this line 98
   remark #15346: vector dependence: assumed FLOW dependence between this line 98 and this line 92

   LOOP BEGIN at central2d.h(91,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between this line 92 and this line 98
      remark #15346: vector dependence: assumed FLOW dependence between this line 98 and this line 92
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::init(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at central2d.h(91,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: Central2D<Shallow2D, MinMod<Shallow2D::real>>::init(Central2D<Shallow2D, MinMod<Shallow2D::real>> *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at central2d.h(90,5)
   remark #25460: No loop optimizations reported

   LOOP BEGIN at central2d.h(91,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================
